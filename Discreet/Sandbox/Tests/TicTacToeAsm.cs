using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Discreet.Sandbox.Tests
{
    internal static class TicTacToeAsm
    {
        internal static readonly string Program = "preamble:\n\tPUSH1 0x80\n\tRDML\n\tDUP1\n\tDUP1\n\tDUP1\n\tISZ\n\tPUSH4 XTurn\n\tJMPC\n\tPUSH1 1\n\tEQ\n\tPUSH4 OTurn\n\tJMPC\n\tPUSH1 2\n\tEQ\n\tPUSH4 ClaimWin\n\tJMPC\n\tPUSH1 3\n\tEQ\n\tPUSH4 RedeemBet\n\tJMPC\n\tPUSH4 fail\n\tJMP\n\ncountXs:\n\tPUSH1 9\n\tPUSH1 1\n\tPUSH2 0x117\n\tDATCP\n\tPUSH2 0x100\n\tLOAD\t\t; [board]\n\tPUSH0\t\t; [incr board]\n\tPUSH0\t\t; [numx incr board]\ncountXloop:\n\tDUP3\t\t; [board numx incr board]\n\tDUP3\t\t; [incr board numx incr board]\n\tBMSK\t\t; [p11 numx incr board]\n\tPUSH1 0x58\t; [X pxx numx incr board]\n\tEQ\t\t; [\"pxx == X\" numx incr board]\n\tADD\t\t; [numx incr board]\n\tDUP2\t\t; [incr numx incr board]\n\tPUSH1 8\t\t; [8 incr numx incr board]\n\tEQ\t\t; [\"incr == 8\" numx incr board]\n\tPUSH4 countXend ; [...]\n\tJMPI\t\t; [numx incr board]\n\tDUP2\t\t; [incr numx incr board]\n\tPUSH1 1\t\t; [1 incr numx incr board]\n\tADD\t\t; [incr numx oldincr board]\n\tSWAP2\t\t; [oldincr numx incr board]\n\tPOP\t\t; [numx incr board]\n\tPUSH4 countXloop; [countXloop numx incr board]\n\tJMP\ncountXend: ; [numx incr board]\n\tSWAP2\t\t; [board incr numx <retloc>]\n\tPOP\n\tPOP\t\t; [numx]\n\tSWAP1\t\t; [<retloc> numx]\n\tRET\n\ncheckSig:\n\tPUSH2 0x100\t; [dest]\n\tPUSH1 0xA0\t; [sz dest]\n\tPUSH0\t\t; [offset sz dest]\n\tDUP3\t\t; [dest offset sz dest]\n\tMCP\t\t; [dest]\n\tPUSH1 10\t; [sz dest]\n\tPUSH0\t\t; [offset sz dest]\n\tPUSH2 0x1A0\t; [dest offset sz dest]\n\tDATCP\t\t; [dest]\n\tPUSH2 0xB0\t; [sz offset]\n\tSWAP1\t\t; [offset sz]\n\tSHA2\t\t; [h]\n\tPUSH2 0x200\t; [dest h]\n\tPUSH1 0x60\t; [sz dest h]\n\tPUSH0\t\t; [offset sz dest h]\n\tDUP3\t\t; [dest offset sz dest h]\n\tRDMCP\t\t; [dest h]\n\tSWAP1\t\t; [h offset]\n\tEDVER\t\t; [ver]\n\tPUSH1 1\n\tXOR\t\t; [!ver]\n\tPUSH4 fail\n\tJMPI\n\tRET\n\t\nRedeemBet:\n\tPUSH4 countXs\n\tCALL\n\tDUP1\t\t; [numx numx]\n\tPUSH0\t\t; [0 numx numx]\n\tEQ\t\t; [\"numx == 0\" numx]\n\tSWAP1\t\t; [numx cond]\n\tPUSH1 0x20\t; [offset numx cond]\n\tLOAD\t\t; [addrX numx cond]\n\tINDEX\t\t; [i addrX numx cond]\n\tNUMIN\t\t; [numin i addrX numx cond]\n\tPUSH1 2\t\t; [2 numin i addrX numx cond]\n\tEQ\t\t; [\"numin == 2\" i addrX numx cond]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\t; ...\n\tJMPI\t\t; fail if numin is not 2\n\tPUSH1 1\t\t; [1 i addrX numx cond]\n\tXOR\t\t; [\"i ^ 1\" addrX numx cond]\n\tINADDR\t\t; [addr addrX numx cond]\n\tEQ\t\t; [\"addr == addrX\" numx cond]\n\tPUSH0\n\tLOAD\t\t; [xcreator cond1 numx cond0]\n\tAND\t\t; [cond1 numx cond0]\n\tSWAP1\t\t; [numx cond1 cond0]\n\tPUSH1 1\t\t; [1 numx cond1 cond0]\n\tEQ\t\t; [\"1 == numx\" cond1 cond0]\n\tAND\t\t; [cond1 cond0]\n\tOR\t\t; [fullcond]\n\tNOP\t\t; third cond: check if board is not won and nonzero\n\tPUSH1 10\n\tPUSH0\n\tPUSH2 0x416\n\tDATCP\n\tPUSH2 0x400\n\tLOAD\t\t; [board fullCond]\n\tPUSH0\n\tDUP2\t\t; [board 0 board]\n\tPUSH1 9\t\t; [9 board board]\n\tBYTE\t\t; [nextTurn board]\n\tDUP3\t\t; ...\n\tPUSH1 8\n\tBYTE\n\tDUP4\n\tPUSH1 7\n\tBYTE\n\tDUP5\n\tPUSH1 6\n\tBYTE\n\tDUP6\n\tPUSH1 5\n\tBYTE\n\tDUP7\n\tPUSH1 4\n\tBYTE\n\tDUP8\n\tPUSH1 3\n\tBYTE\n\tDUP9\n\tPUSH1 2\n\tBYTE\n\tDUP10\n\tPUSH1 1\n\tBYTE\n\tDUP11\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn 0 board]\n\tPUSH4 rdmBet2\n\tSWAP11\n\tPOP\n\tPUSH4 checkWin\n\tJMP\nrdmBet2:\t\t; [<board> win board]\n\tPUSH0\t\t; [0 p33 ... win board]\n\tEQ\n\tPUSH1 1\n\tXOR\t\t; [\"p33 != 0\" p32 ... win board]\n\tSWAP1\t\t; [p32 cond ... win board]\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\t\t; [\"p32 != 0\" cond ... win board]\n\tAND\t\t; [condAcc p31 ... win board fullCond]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc p23 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc p22 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc p21 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc p13 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\t\t; [condAcc p12 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc p11 ...]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc nextTurn win board fullCond]\n\tSWAP1\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tAND\t\t; [condAcc win board fullCond]\n\tSWAP1\t\t; [win condAcc board fullCond]\n\tPUSH1 1\n\tXOR\t\t; [!win condAcc board fullCond]\n\tAND\t\t; [cond board fullCond]\n\tSWAP1\n\tPOP\t\t; [cond fullCond]\n\tOR\t\t; [fullCond]\n\tPUSH1 1\t\t; [!fullcond]\n\tXOR\n\tPUSH4 fail\n\tJMPI\n\tPUSH1 0x80\n\tLOAD\t\t; [earliestValidityInterval]\n\tCTXINTL\t\t; [intl earliest]\n\tLT\t\t; [\"intl < earliest\"]\n\tPUSH4 fail\n\tJMPI\t\t; fail if earliest validity interval not reached\n\tPUSH4 checkSig\n\tCALL\n\tSUCC\n\ngetOutBoard:\n\tADDR\t\t; [addr]\n\tNUMOUT\t\t; [numout addr]\n\tPUSH1 1\n\tSWAP1\n\tSUB\t\t; [numout-1 addr]\noutBchk:\n\tDUP1\t\t; [i i addr]\n\tPUSH0\t\t; [0 i i addr]\n\tEQ\n\tPUSH4 outBchp\n\tJMPI\n\tDUP2\t\t; [addr i addr]\n\tDUP2\t\t; [i addr i addr]\n\tOUTADDR\t\t; [oaddr addr i addr]\n\tEQ\t\t; [cond i addr]\n\tPUSH4 outBchy\n\tJMPI\n\tPUSH1 1\n\tSWAP1\n\tSUB\n\tPUSH4 outBchk\n\tJMP\noutBchp:\n\tPUSH4 fail\n\tJMP\t\t; fail if we don\'t find the board\noutBchy:\n\tDUP1\t\t; [i i addr]\n\tOUTDATSZ\t; [sz i addr]\n\tPUSH1 10\t; [10 sz i addr]\n\tEQ\t\t; [cond i addr]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; fail if output datum is not len(10)\n\tSWAP1\t\t; [addr i]\n\tPOP\t\t; [i]\n\tPUSH1 10\n\tPUSH0\n\tPUSH2 0x416\t; [dest offset sz i]\n\tPUSH0\n\tSWAP4\n\tOUTDATCP\n\tPUSH2 0x400\t; [400 0]\n\tLOAD\t\t; [board 0 rv]\n\tSWAP2\t\t; [rv 0 board]\n\tSWAP1\t\t; [0 rv board]\n\tPOP\t\t; [rv board]\n\tRET\n\ncheckWin:\n\tDUP9\n\tPUSH0\n\tEQ\t\t; [cond <board>]\n\tPUSH1 1\n\tXOR\n\tDUP10\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP5\n\tEQ\n\tAND\t\t; [cond <board>]\n\tDUP9\n\tPUSH0\n\tEQ\t\t; [cond condAcc <board>]\n\tPUSH1 1\n\tXOR\n\tDUP10\n\tDUP8\n\tEQ\t\t; [curCond cond condAcc <board>]\n\tAND\n\tDUP7\n\tDUP5\n\tEQ\n\tAND\t\t; [cond condAcc <board>]\n\tOR\t\t; [condAcc <board>]\n\tDUP8\n\tPUSH0\n\tEQ\t\t; [cond condAcc <board>]\n\tPUSH1 1\n\tXOR\t\t; [cond condAcc <board>]\n\tDUP9\t\t\n\tDUP7\n\tEQ\t\t; [curCond cond condAcc <board>]\n\tAND\n\tDUP6\n\tDUP4\n\tEQ\n\tAND\n\tOR\t\t; [condAcc p33 p32 p31 ...]\n\tDUP10\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\t\t; [cond condAcc <board>]\n\tDUP11\n\tDUP11\n\tEQ\n\tAND\n\tDUP10\n\tDUP10\n\tEQ\n\tAND\n\tOR\t\t; [condAcc <board>]\n\tDUP7\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\t\t; [cond condAcc <board>]\n\tDUP8\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP7\n\tEQ\n\tAND\n\tOR\t\t; [condAcc <board>]\n\tDUP4\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tDUP5\n\tDUP5\n\tEQ\n\tAND\n\tDUP4\n\tDUP4\n\tEQ\n\tAND\n\tOR\t\t; [condAcc <board>]\n\tDUP10\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tDUP11\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP4\n\tEQ\n\tAND\n\tOR\n\tDUP8\n\tPUSH0\n\tEQ\n\tPUSH1 1\n\tXOR\n\tDUP9\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP6\n\tEQ\n\tAND\n\tOR\t\t; [cond p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn <rv>]\n\tSWAP11\t\t; [<rv> ...                                          cond]\n\tRET\n\nXTurn:\n\tPUSH4 checkSig\n\tCALL\n\tPUSH1 0x20\t; [offset]\n\tLOAD\t\t; [addrX\n\tINDEX\t\t; [i addrX]\n\tNUMIN\t\t; [numin i addrX]\n\tPUSH1 2\t\t; [2 numin i addrX]\n\tEQ\t\t; [\"numin == 2\" i addrX]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\t; ...\n\tJMPI\t\t; fail if numin is not 2\n\tPUSH1 1\t\t; [1 i addrX]\n\tXOR\t\t; [\"i ^ 1\" addrX]\n\tINADDR\t\t; [addr addrX]\n\tEQ\t\t; [\"addr == addrX\"]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; fail if address is not X\n\tPUSH1 0x60\n\tRDML\t\t; [move]\n\tPUSH0\t\t; [0 move]\n\tDUP2\t\t; [move 0 move]\n\tGT\t\t; [\"move > 0\" move]\n\tPUSH0\t\t; [0 cond event]\n\tDUP3\t\t; [move 0 cond move]\n\tEQ\t\t; [\"move == 0\" cond move]\n\tOR\t\t; [cond move]\n\tPUSH1 9\t\t; [9 cond move]\n\tDUP3\t\t; [move 9 cond move]\n\tLT\t\t; [\"move < 9\" cond move]\n\tAND\t\t; [cond move]\n\tPUSH1 1\n\tXOR\t\t; [!cond move]\n\tPUSH4 fail\n\tJMPI\t\t; checks that the move is between 0 and 8, inclusive\n\tPUSH1 10\n\tPUSH0\n\tPUSH2 0x316\n\tDATCP\n\tPUSH2 0x300\n\tLOAD\t\t; [board], unwrap board\n\tPUSH0\n\tDUP2\t\t; [board 0 board]\n\tPUSH1 9\t\t; [9 board board]\n\tBYTE\t\t; [nextTurn board]\n\tDUP1\t\t; [nextTurn nextTurn board]\n\tPUSH1 0x58\t; [X nextTurn nextTurn board]\n\tEQ\t\t; [\"X == nextTurn\" nextTurn board]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; we check our turn here early\n\tDUP3\t\t; ...\n\tPUSH1 8\n\tBYTE\n\tDUP4\n\tPUSH1 7\n\tBYTE\n\tDUP5\n\tPUSH1 6\n\tBYTE\n\tDUP6\n\tPUSH1 5\n\tBYTE\n\tDUP7\n\tPUSH1 4\n\tBYTE\n\tDUP8\n\tPUSH1 3\n\tBYTE\n\tDUP9\n\tPUSH1 2\n\tBYTE\n\tDUP10\n\tPUSH1 1\n\tBYTE\n\tDUP11\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn 0 board]\n\tPUSH4 xturn2\t; [xturn2 <board>... 0 board]\n\tSWAP11\t\t; [0 ... xturn2 board]\n\tPOP\t\t; [... xturn2 board]\n\tPUSH4 checkWin\n\tJMP\t\t; simple jump here\nxturn2:\t\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn cond board]\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\t\t; [cond board]\n\tPUSH4 fail\n\tJMPI\n\tPOP\t\t; load the complete board\n\tPUSH4 getOutBoard\n\tCALL\n\tPUSH0\t\t; [0 board]\n\tDUP2\t\t; [board 0 board]\n\tPUSH1 9\t\t; [9 board board]\n\tBYTE\t\t; [nextTurn board]\n\tDUP3\t\t; ...\n\tPUSH1 8\n\tBYTE\n\tDUP4\n\tPUSH1 7\n\tBYTE\n\tDUP5\n\tPUSH1 6\n\tBYTE\n\tDUP6\n\tPUSH1 5\n\tBYTE\n\tDUP7\n\tPUSH1 4\n\tBYTE\n\tDUP8\n\tPUSH1 3\n\tBYTE\n\tDUP9\n\tPUSH1 2\n\tBYTE\n\tDUP10\n\tPUSH1 1\n\tBYTE\n\tDUP11\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn 0 board]\n\tPUSH4 xturn3\t; [xturn3 <board>... 0 board]\n\tSWAP11\t\t; [0 ...]\n\tPOP\n\tPUSH4 checkWin\n\tJMP\nxturn3:\t\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn cond board] \n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\t\t; [nextTurn cond board]\n\tDUP2\t\t; [win nextTurn win board]\n\tDUP2\t\t; [nextTurn win nextTurn win board]\n\tPUSH0\t\t; [0 nextTurn win nextTurn win board]\n\tEQ\n\tAND\t\t; [cond nextTurn win board]\n\tDUP3\t\t; [win cond nextTurn win board]\n\tPUSH1 1\n\tXOR\t\t; [!win cond ...]\n\tDUP3\t\t; [nextTurn !win cond nextTurn win board]\n\tPUSH1 0x4f\t; [O ...]\n\tEQ\n\tAND\t\t; [cond1 cond0 nextTurn win board]\n\tOR\t\t; [cond nextTurn win board]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; fail if next turn on new board is wrong\n\tNOP\t\t; [nextTurn win board]\n\tPOP\n\tPOP\t\t; [newBoard]\n\tPUSH9 0xFFFFFFFFFFFFFFFFFF\n\tAND\t\t; [maskedNewBoard]\n\tPUSH2 0x300\n\tLOAD\n\tPUSH9 0xFFFFFFFFFFFFFFFFFF\n\tAND\t\t; [maskedBoard maskedNewBoard]\n\tPUSH1 0x60\n\tRDML\t\t; [move maskedBoard maskedNewBoard]\n\tPUSH1 8\n\tSUB\t\t; [\"8 - move\" maskedBoard maskedNewBoard]\n\tPUSH1 8\n\tMUL\t\t; [\"8*(8 - move)\" maskedBoard maskedNewBoard]\n\tPUSH1 0x58\n\tSHL\t\t; [\"(0x58 << (8*(8 - move)))\" maskedBoard maskedNewBoard]\n\tADD\t\t; [boardTest maskedNewBoard]\n\tEQ\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; check the board move is correct\n\tSUCC\t\t; all is good\n\nOTurn:\n\tPUSH4 checkSig\n\tCALL\n\tPUSH1 0x40\t; [offset]\n\tLOAD\t\t; [addrO\n\tINDEX\t\t; [i addrO]\n\tNUMIN\t\t; [numin i addrO]\n\tPUSH1 2\t\t; [2 numin i addrO]\n\tEQ\t\t; [\"numin == 2\" i addrO]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\t; ...\n\tJMPI\t\t; fail if numin is not 2\n\tPUSH1 1\t\t; [1 i addrO]\n\tXOR\t\t; [\"i ^ 1\" addrO]\n\tINADDR\t\t; [addr addrO]\n\tEQ\t\t; [\"addr == addrO\"]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; fail if address is not O\n\tPUSH1 0x60\n\tRDML\t\t; [move]\n\tPUSH0\t\t; [0 move]\n\tDUP2\t\t; [move 0 move]\n\tGT\t\t; [\"move > 0\" move]\n\tPUSH0\t\t; [0 cond event]\n\tDUP3\t\t; [move 0 cond move]\n\tEQ\t\t; [\"move == 0\" cond move]\n\tOR\t\t; [cond move]\n\tPUSH1 9\t\t; [9 cond move]\n\tDUP3\t\t; [move 9 cond move]\n\tLT\t\t; [\"move < 9\" cond move]\n\tAND\t\t; [cond move]\n\tPUSH1 1\n\tXOR\t\t; [!cond move]\n\tPUSH4 fail\n\tJMPI\t\t; checks that the move is between 0 and 8, inclusive\n\tPUSH1 10\n\tPUSH0\n\tPUSH2 0x316\n\tDATCP\n\tPUSH2 0x300\n\tLOAD\t\t; [board], unwrap board\n\tPUSH0\n\tDUP2\t\t; [board 0 board]\n\tPUSH1 9\t\t; [9 board board]\n\tBYTE\t\t; [nextTurn board]\n\tDUP1\t\t; [nextTurn nextTurn board]\n\tPUSH1 0x4f\t; [O nextTurn nextTurn board]\n\tEQ\t\t; [\"O == nextTurn\" nextTurn board]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; we check our turn here early\n\tDUP3\t\t; ...\n\tPUSH1 8\n\tBYTE\n\tDUP4\n\tPUSH1 7\n\tBYTE\n\tDUP5\n\tPUSH1 6\n\tBYTE\n\tDUP6\n\tPUSH1 5\n\tBYTE\n\tDUP7\n\tPUSH1 4\n\tBYTE\n\tDUP8\n\tPUSH1 3\n\tBYTE\n\tDUP9\n\tPUSH1 2\n\tBYTE\n\tDUP10\n\tPUSH1 1\n\tBYTE\n\tDUP11\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn 0 board]\n\tPUSH4 oturn2\t; [oturn2 <board>... 0 board]\n\tSWAP11\t\t; [0 ... oturn2 board]\n\tPOP\t\t; [... oturn2 board]\n\tPUSH4 checkWin\n\tJMP\t\t; simple jump here\noturn2:\t\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn cond board]\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\t\t; [cond board]\n\tPUSH4 fail\n\tJMPI\n\tPOP\t\t; load the complete board\n\tPUSH4 getOutBoard\n\tCALL\n\tPUSH0\t\t; [0 board]\n\tDUP2\t\t; [board 0 board]\n\tPUSH1 9\t\t; [9 board board]\n\tBYTE\t\t; [nextTurn board]\n\tDUP3\t\t; ...\n\tPUSH1 8\n\tBYTE\n\tDUP4\n\tPUSH1 7\n\tBYTE\n\tDUP5\n\tPUSH1 6\n\tBYTE\n\tDUP6\n\tPUSH1 5\n\tBYTE\n\tDUP7\n\tPUSH1 4\n\tBYTE\n\tDUP8\n\tPUSH1 3\n\tBYTE\n\tDUP9\n\tPUSH1 2\n\tBYTE\n\tDUP10\n\tPUSH1 1\n\tBYTE\n\tDUP11\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn 0 board]\n\tPUSH4 oturn3\t; [oturn3 <board>... 0 board]\n\tSWAP11\t\t; [0 ...]\n\tPOP\n\tPUSH4 checkWin\n\tJMP\noturn3:\t\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn cond board] \n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\n\tPOP\t\t; [nextTurn cond board]\n\tDUP2\t\t; [win nextTurn win board]\n\tDUP2\t\t; [nextTurn win nextTurn win board]\n\tPUSH0\t\t; [0 nextTurn win nextTurn win board]\n\tEQ\n\tAND\t\t; [cond nextTurn win board]\n\tDUP3\t\t; [win cond nextTurn win board]\n\tPUSH1 1\n\tXOR\t\t; [!win cond ...]\n\tDUP3\t\t; [nextTurn !win cond nextTurn win board]\n\tPUSH1 0x58\t; [X ...]\n\tEQ\n\tAND\t\t; [cond1 cond0 nextTurn win board]\n\tOR\t\t; [cond nextTurn win board]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; fail if next turn on new board is wrong\n\tNOP\t\t; [nextTurn win board]\n\tPOP\n\tPOP\t\t; [newBoard]\n\tPUSH9 0xFFFFFFFFFFFFFFFFFF\n\tAND\t\t; [maskedNewBoard]\n\tPUSH2 0x300\n\tLOAD\n\tPUSH9 0xFFFFFFFFFFFFFFFFFF\n\tAND\t\t; [maskedBoard maskedNewBoard]\n\tPUSH1 0x60\n\tRDML\t\t; [move maskedBoard maskedNewBoard]\n\tPUSH1 8\n\tSUB\t\t; [\"8 - move\" maskedBoard maskedNewBoard]\n\tPUSH1 8\n\tMUL\t\t; [\"8*(8 - move)\" maskedBoard maskedNewBoard]\n\tPUSH1 0x4f\n\tSHL\t\t; [\"(0x4f << (3*(8 - move)))\" maskedBoard maskedNewBoard]\n\tADD\t\t; [boardTest maskedNewBoard]\n\tEQ\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; check the board move is correct\n\tSUCC\t\t; all is good\n\nClaimWin:\n\tINDEX\t\t; [i]\n\tNUMIN\t\t; [numin i]\n\tPUSH1 2\t\t; [2 numin i]\n\tEQ\t\t; [\"numin == 2\" i]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\t; ...\n\tJMPI\t\t; fail if numin is not 2\n\tPUSH1 1\t\t; [1 i]\n\tXOR\t\t; [\"i ^ 1\"]\n\tINADDR\t\t; [addr]\n\tPUSH1 0x20\n\tLOAD\t\t; [addrX addr]\n\tDUP2\t\t; [addr addrX addr]\n\tEQ\t\t; [\"addr == addrX\" addr]\n\tPUSH4 clwX\n\tJMPI\n\tPUSH1 0x40\n\tLOAD\n\tDUP2\n\tEQ\n\tPUSH4 clwO\n\tJMPI\n\tFAIL\t\t; fail if address is neither X or O\nclwX:\n\tPUSH1 0x58\t; [X]\n\tPUSH4 clw2\n\tJMP\nclwO:\n\tPUSH1 0x4f\t; [O]\nclw2:\n\tPUSH1 0xa\n\tPUSH0\n\tPUSH2 0x216\n\tDATCP\n\tPUSH2 0x200\n\tLOAD\t\t; [board v]\n\tDUP1\t\t; [board board v]\n\tPUSH1 9\t\t; [9 board board v]\n\tBYTE\t\t; [nextTurn board v]\n\tDUP1\t\t; [nextTurn nextTurn board v]\n\tPUSH0\t\t; [0 nextTurn nextTurn board v]\n\tEQ\t\t; [\"nextTurn == 0\" nextTurn board v]\n\tPUSH1 1\n\tXOR\n\tPUSH4 fail\n\tJMPI\t\t; check that nextTurn is zero, i.e. board is complete, [nextTurn board v]\n\tDUP2\t\t; [board nextTurn board v]\n\tPUSH1 8\t\t; [8 board nextTurn board v]\n\tBYTE\t\t; ...\n\tDUP3\n\tPUSH1 7\n\tBYTE\n\tDUP4\n\tPUSH1 6\n\tBYTE\n\tDUP5\n\tPUSH1 5\n\tBYTE\n\tDUP6\n\tPUSH1 4\n\tBYTE\n\tDUP7\n\tPUSH1 3\n\tBYTE\n\tDUP8\n\tPUSH1 2\n\tBYTE\n\tDUP9\n\tPUSH1 1\n\tBYTE\n\tDUP10\n\tPUSH0\n\tBYTE\t\t; [p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn board v]\n\tDUP9\t\t; [p11 p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn board v]\n\tDUP13\n\tEQ\t\t; [cond <board> board v]\n\tDUP10\n\tDUP8\n\tEQ\t\t; [cond1 cond0 <board> board v]\n\tAND\t\t; [cond <board> board v]\n\tDUP7\t\t; \n\tDUP5\n\tEQ\n\tAND\t\t; [condAcc p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn board v]\n\tDUP9\t\t; [\n\tDUP14\n\tEQ\n\tDUP10\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP5\n\tEQ\n\tAND\n\tOR\n\tDUP8\n\tDUP14\n\tEQ\n\tDUP9\n\tDUP7\n\tEQ\n\tAND\n\tDUP6\n\tDUP4\n\tEQ\n\tAND\n\tOR\t\t; [condAcc p33 p32 p31 ...]\n\tDUP10\n\tDUP14\n\tEQ\n\tDUP11\n\tDUP11\n\tEQ\n\tAND\n\tDUP10\n\tDUP10\n\tEQ\n\tAND\n\tOR\n\tDUP7\n\tDUP14\n\tEQ\n\tDUP8\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP7\n\tEQ\n\tAND\n\tOR\n\tDUP4\n\tDUP14\n\tEQ\n\tDUP5\n\tDUP5\n\tEQ\n\tAND\n\tDUP4\n\tDUP4\n\tEQ\n\tAND\n\tOR\n\tDUP10\n\tDUP14\n\tEQ\n\tDUP11\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP4\n\tEQ\n\tAND\n\tOR\n\tDUP8\n\tDUP14\n\tEQ\n\tDUP9\n\tDUP8\n\tEQ\n\tAND\n\tDUP7\n\tDUP6\n\tEQ\n\tAND\n\tOR\t\t; [cond p33 p32 p31 p23 p22 p21 p13 p12 p11 nextTurn <rv>]\n\tPUSH1 1\n\tXOR\t\t; [!cond]\n\tPUSH4 fail\n\tJMPI\t\t; fail if board is not complete\n\tSUCC\t\t; otherwise good!\n\t\nfail:\n\tFAIL";
    }
}
